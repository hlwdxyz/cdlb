1)
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main()
{
FILE *fp;
int strcheck=0, string = 0, open =0, close =0;
int i,lineno=0;
char line[100];

        fp=fopen("checker.txt", "r");
        if(fp==NULL)
        {
        printf("File can’t be opened\n");
        exit(0);
        }
printf("File opened correctly!\n");

while(fgets(line, sizeof(line), fp)!=NULL)
{
lineno++;
strcheck = string = open = close =0;
    for(i=0;i<strlen(line);i++)
    {
        if(line[i]=='"')
        {
        string=1;
        if(open==1 && close==0) close=1;
        else if(open==0 && close==0) open=1;
        else if(open==1 && close==1) close=0;
        }
    }
    if(open==1 && close==0)
    {
    printf("\n Unterminated string in line %d. String Has to be closed \n", lineno);
    strcheck=1;
    }
    else if(string==1 && strcheck==0)
    {
    printf("\n String usage in line %d is validated! \n",lineno);
    }
}
return 0;
}

Checker.txt
#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
int a,b,h;
a=a+b;
char d[20]="pizza",h[67]="karela;
char c[10]="biryani";
a=a+/b+h;
strlen("watermelon");
strlen("brinjal );
strcpy(c,"crocodile);
b=b+*;
}

2)
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main()
{
FILE *fp;
int commentcheck=0, comment =0,open=0,close=0, openlineno, closelineno;
int i, lineno=0;
char line[100];

fp=fopen("checker2.txt", "r");
    if(fp==NULL)
    {
    printf("File can’t be opened\n");
    exit(0);
    }
    printf("File opened correctly!\n");

while(fgets(line, sizeof(line), fp)!=NULL)
{
    lineno++;
    //commentcheck=comment=0;

    if(open==1 && close==0)
        printf("\n%s",line);

    if(strstr(line,"/*") && open==0)
    {
        openlineno=lineno;
        open=1;close=0;
//comment=1;
        printf("\n%s",line);
    }

    if(strstr(line,"*/") && close==0 && open==1)
    {
    closelineno=lineno;
    close=1;open=0;
    printf("\n Comment is displayed above!\n Comment opened in line no %d \n Closed in line no %d",openlineno,closelineno);
    }

}

if(open==1 && close==0)
{
    printf("\n Unterminated comment in begin in line no %d. It Has to be closed \n", openlineno);
    //commentcheck=1;
}

/*else if(comment==1 && commentcheck==0)
{
    printf("\n Comment usage in line %d is validated!\n",lineno);
}*/

return 0;
}

Checker2.txt
#include<stdio.h>
#include<conio.h>
#include<string.h>
/*A comment*/
void main()
{
/*Lines
of code
in comment
*/
int a,b=78;

/*
printf("magical");
}

3a)

%{
#include<stdio.h>
int c=0;
%}
%%
\n { c++; }
["][a-zA-Z0-9]*["] {ECHO; printf("     Valid String - line number %d\n ",c+1);}
["][a-zA-Z0-9]* { ECHO; printf("      Invalid String - line number %d\n ",c+1);}
. ;
%%
int main()
{
yyin=fopen("checker.txt","r");
yylex();
fclose(yyin);
}

#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
int a,b,h;
a=a+b;
char d[20]="pizza",h[67]="karela;
char c[10]="biryani";
a=a+/b+h;
strlen("watermelon");
strlen("brinjal );
strcpy(c,"crocodile);
b=b+*;
}

3b)

%{
#include<stdio.h>
int c=0;
%}
op [-+*/]
id [a-zA-Z][a-zA-Z0-9-]*
num [0-9]+
expr ({id}|{num}){op}({id}|{num})
%%
\n { c++; }
^"#".+ ;
^("int "|"float "|"char ").+ ;
"void main()" ;
{id}"="({expr}+";") {ECHO; printf(" Valid expression in line no : %d\n",c+1); printf("\n");}
{id}"="({num}|{id}";") {ECHO; printf(" Valid expression in line no : %d\n",c+1); printf("\n");}
({num}|([0-9]*[a-zA-Z0-9-]+))"="{expr}+ {ECHO; printf(" Invalid expression in line no : %d \n L-value wrong\n",c+1); printf("\n");}
{id}"=;" {ECHO; printf(" Invalid expression in line no : %d \n R-value required \n",c+1); printf("\n");}
{op}{op}+ {ECHO; printf(" Invalid expression in line no: %d \n More than one operator cannot be used in expression consecutively \n",c+1); printf("\n");}
.|\n ;
%%
int main()
{
yyin=fopen("checker.txt","r");
yylex();
fclose(yyin);     }

#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
int a,b,h;
a=a+b;
a=a+/b+h;
b=b+*;
1a=7+h-;
a=;
}

4a)
%{
#include<stdio.h>
int c=0;
%}
num [0-9]+(".")?[0-9]*
invalid [0-9]+(".")[0-9]*((".")[0-9]*)+
%%
\n {c++;}
{num} {ECHO; printf("\n Valid number in line %d \n",c+1); printf("\n");}
{num}[a-zA-Z0-9_]+ {ECHO; printf("\n Invalid number in line %d \n Number followed with alphabets \n",c+1); printf("\n");}
{invalid} {ECHO; printf("\n Invalid number in line %d \n Number with more than one decimal point is invalid \n",c+1); printf("\n");}
. ;
%%
void main()
{
yyin = fopen("checker.txt","r");
yylex();
fclose(yyin);
}

#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
int a,b,h;
int a=56;
a=1b;
a=a+5h;
a=a+4.5+5.6.6;
a=a+b;
}

4b)
%{
#include<stdio.h>
int c=0;
%}
%s DECLARE VAR
id [a-zA-Z][a-zA-Z0-9-]*
num [0-9]+[.]?[0-9]*
string ("\"")([a-zA-Z0-9]+)("\"")
%%
\n {c++;}
"int "|"float " {BEGIN DECLARE;}
<DECLARE>{id}"="{num}? {BEGIN VAR;}
<DECLARE>{id}"="{string} {ECHO; BEGIN VAR; printf("\n Invalid variable declaration in line %d \n string can't be assigned to integer or float variable \n",c+1);printf("\n");}
<VAR>";" {BEGIN 0;}
<VAR>{id}("="{num})? {}
<VAR>{id}"="{string} { ECHO; printf("\n Invalid variable declaration in line %d \n string can't be assigned to integer or float variable \n",c+1); printf("\n");}
<VAR>"," {BEGIN DECLARE;}
<VAR>[,][,]+ {ECHO; printf("\n Invalid - More than one comma in line %d \n",c+1);BEGIN DECLARE; printf("\n");}
. ;
%%


void main()
{
yyin = fopen("checker.txt","r");
yylex();
fclose(yyin);
}

#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
int a,b=78,g="78",,;
float c=5.6,h="fg";
sa=5;
a=a+b;
printf("\n ");
}


5a)

%{
#include<stdio.h>
int c=0,bc=0,fc=0;
%}
%s IF op cp of
%%
\n { c++; printf("\n");}
"if" {BEGIN IF;bc=0;}
<IF>"(" {BEGIN op;ECHO;bc++;}
<IF>")" {BEGIN cp;ECHO;bc--;}

<op>")" {ECHO; bc--;BEGIN cp;}
<op>"(" {ECHO;bc++;}
<op>. {ECHO;}

<cp>"{" { ECHO;if(bc==0) {printf(" valid in line %d",c+1);} else printf(" invalid in line %d \n Parentheses mismatch ",c+1); BEGIN of; printf("\n"); fc++;}
<cp>"(" {BEGIN op;ECHO;bc++;}
<cp>")" {ECHO;bc--;}
<cp>. {ECHO;}

<of>"}" {fc--;if(fc==0) BEGIN 0;ECHO;printf("\n");}
<of>. {ECHO;}
%%

int main()
{
yyin=fopen("checker.txt","r");
yylex();
fclose(yyin);
}

#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
int a,b=78;
if((a<5&&j<9)
{
a=a+h;
printf("\n ");
}
if(a<n)
{
h=j+k;
}
if(a<n))
{
g=h+k;
}
}



5b)

%{
#include<stdio.h>
int c=0, oc=0;
%}
%s COMMENT
%%
\n {c++;}
"/*" {BEGIN COMMENT; printf("\n Comment begins in line %d\n",c); ECHO; oc=1;}
<COMMENT>"*/" {BEGIN 0; ECHO; oc=0; printf("\n Comment ends in line %d\n",c);}
<COMMENT>. {ECHO;}
. ;
%%

int main()
{
yyin=fopen("checker.txt","r");
yylex();
fclose(yyin);
if(oc==1)
{
printf("\n Comment is not closed till EOF! \n");
}
}


#include<stdio.h>
#include<conio.h>
#include<string.h>
/*A comment*/
void main()
{
/*Lines
of code
in comment
*/
int a,b=78;

/*
printf("magical");

}

6)

lex

%{
#include "y.tab.h"
#include<stdio.h>
#include<ctype.h>
extern int yylval;
int val;
%}
%%
[a-zA-Z][a-zA-Z0-9]* {printf("\n enter the value of variable %s:",yytext);scanf("%d",&val);yylval=val;return id;}
[0-9]+[.]?[0-9]* {yylval=atoi(yytext);return num;}
[ \t] ;
\n {return 0;}
. {return yytext[0];}
%%
int yywrap()
{
return 1;
}

yacc

%{
#include<stdlib.h>
#include<stdio.h>
int flag=1;
%}
%token id num
%left '(' ')'
%left '+' '-'
%left '/' '*'
%nonassoc UMINUS
%%
stmt: expression { printf("\n valid exprn");}
;
expression :  expression '+' term {printf("\nplus recog!");$$=$1+$3;printf("\n %d",$$);}
| expression '+' {printf ("\n Syntax error: Right operand is missing ");}
| expression '-' term {printf("\nminus recog!");$$=$1-$3;printf("\n %d",$$);}
| expression '-' {printf ("\n Syntax error: Right operand is missing ");}
| term
;
term : term '*' factor {printf("\nMul recog!");$$=$1*$3;printf("\n %d",$$);}
| term '*' { printf ("\n Syntax error: Right operand is missing ");}
| term '/' factor {printf("\ndivision recog!");if($3==0) printf("\ndivision cant be done, as divisor is zero."); else {$$=$1+$3;printf("\n %d",$$);}}
| term '/' { printf ("\n Syntax error: Right operand is missing ");}
| term '%' term { printf ("\n Modulus recognised");$$=$1%$3;printf("\n %d",$$);}
| term '%' { printf ("\n Syntax error: Right operand is missing ");}
| factor
;
factor : '(' expression ')'{$$=$2;printf("\n %d",$$);}
| id
| num
;
%%
main()
{
printf(" Enter an arithmetic expression\n");
yyparse();
}
yyerror()
{
printf(" Invalid arithmetic Expression\n");
exit(1);
}


7)

yacc

%{
#include<stdio.h>
%}
%token id num comma colon key
%%
stmt: list;
list: key list 
| list ',' list 
| list ','',' {printf("invalid declaration \n");}
| list col 
| id '[' num ']' {printf("valid2\n");}
| id '[' id ']' {printf("error value can't be string\n");}
| id '[' {printf("size missing \n");}
| id '[' num {printf("right bracket missing error \n");}
| id 
;
col: colon
| colon col {printf("error two semi colons \n");}
%%
main(){
	printf("entr declaration\n");
	yyparse();
}
yyerror(){
	printf("invalid declaration\n");
	return 1;
}

lex

%{
#include<stdio.h>
#include "y.tab.h"
int yylval;
%}
%%
"int"[ ]+ {return key;}
"float"[ ]+ {return key;}
"double"[ ]+ {return key;}
"char"[ ]+ {return key;}
"long int"[ ]+ {return key;}
[a-zA-Z][a-zA-Z0-9]* {return id;}
[0-9]+ {return num;}
[;] {return colon;}
[ \t] ;
\n {return 0;}
. {return yytext[0];}
%%
int yywrap()
{
	return 1;
}

8)

%{
#include<stdio.h>
#include<stdlib.h>
%}
%token id num
%%
start : e {printf("\n Valid Exprn : Evaluated result is %d \n\n",$1);}
;
e : '(' e ')' {printf("\n Valid Exprn :  %d \n\n",$2);}
| '(' e {printf("Invalid missing right op \n"); exit(0);}
| e '<' e {printf("\n Valid"); $$=($1<$3); printf(" %d", $$);}
| e '<'{printf("Invalid missing right op \n"); exit(0);}
| e '<''=' e {printf("\n Valid"); $$=($1<=$4); printf(" %d", $$);}
| e '<''=' {printf("Invalid Missing right op\n"); exit(0);}
| e '>' e {printf("\n Valid"); $$=($1>$3); printf(" %d", $$);}
| e '>' {printf("Invalid Missing right op\n"); exit(0);}
| e '>''=' e {printf("\n Valid"); $$=($1>=$4); printf(" %d", $$);}
| e '>''=' {printf("Invalid Missing right op\n"); exit(0);}
| e '=''=' e {printf("\n Valid"); $$=($1==$4); printf(" %d", $$);}
| e '=''=' {printf("Invalid Missing right op\n"); exit(0);}
| e '!''=' e {printf("\n Valid"); $$=($1!=$4); printf(" %d", $$);}
| e '!''=' {printf("Invalid Missing right op\n"); exit(0);}
|id
|num
;
%%
int main()
{
printf("Enter expression\n");
yyparse();
}

int yyerror()
{
printf("Invalid \n\n");
exit(0);
}

9)

%{
#include<stdio.h>
#include<stdlib.h>
%}
%token id num
%%
start : e {printf("\n Valid Exprn : Evaluated result is %d \n\n",$1);}
;
e : '(' e ')' {printf("\n Valid Exprn :  %d \n\n",$2);}
| '(' e {printf("Invalid missing right op \n"); exit(0);}
| e '&''&' e {printf("\n Valid"); $$=($1&&$4); printf(" %d", $$);}
| e '&''&' {printf("Invalid missing right op \n"); exit(0);}
| e '|''|' e {printf("\n Valid"); $$=($1||$4); printf(" %d", $$);}
| e '|''|' {printf("Invalid Missing right op\n"); exit(0);}
| '!' e {printf("\n Valid"); $$=(!$1); printf(" %d", $$);}
| '!' {printf("Invalid Missing right op\n"); exit(0);}
|id
|num
;
%%
int main()
{
printf("Enter expression\n");
yyparse();
}

int yyerror()
{
printf("Invalid \n\n");
exit(0);
}

